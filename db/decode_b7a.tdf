--lpm_decode CBX_DECLARE_ALL_CONNECTED_PORTS="OFF" DEVICE_FAMILY="Cyclone III" LPM_DECODES=8 LPM_WIDTH=3 data eq
--VERSION_BEGIN 9.1 cbx_cycloneii 2009:10:21:21:22:16:SJ cbx_lpm_add_sub 2009:10:21:21:22:16:SJ cbx_lpm_compare 2009:10:21:21:22:16:SJ cbx_lpm_decode 2009:10:21:21:22:16:SJ cbx_mgl 2009:10:21:21:37:49:SJ cbx_stratix 2009:10:21:21:22:16:SJ cbx_stratixii 2009:10:21:21:22:16:SJ  VERSION_END


-- Copyright (C) 1991-2009 Altera Corporation
--  Your use of Altera Corporation's design tools, logic functions 
--  and other software and tools, and its AMPP partner logic 
--  functions, and any output files from any of the foregoing 
--  (including device programming or simulation files), and any 
--  associated documentation or information are expressly subject 
--  to the terms and conditions of the Altera Program License 
--  Subscription Agreement, Altera MegaCore Function License 
--  Agreement, or other applicable license agreement, including, 
--  without limitation, that your use is for the sole purpose of 
--  programming logic devices manufactured by Altera and sold by 
--  Altera or its authorized distributors.  Please refer to the 
--  applicable agreement for further details.



--synthesis_resources = lut 8 
SUBDESIGN decode_b7a
( 
	data[2..0]	:	input;
	eq[7..0]	:	output;
) 
VARIABLE 
	data_wire[2..0]	: WIRE;
	eq_node[7..0]	: WIRE;
	eq_wire[7..0]	: WIRE;
	w_anode118w[3..0]	: WIRE;
	w_anode136w[3..0]	: WIRE;
	w_anode147w[3..0]	: WIRE;
	w_anode158w[3..0]	: WIRE;
	w_anode169w[3..0]	: WIRE;
	w_anode180w[3..0]	: WIRE;
	w_anode191w[3..0]	: WIRE;
	w_anode202w[3..0]	: WIRE;

BEGIN 
	data_wire[] = data[];
	eq[] = eq_node[];
	eq_node[7..0] = eq_wire[7..0];
	eq_wire[] = ( w_anode202w[3..3], w_anode191w[3..3], w_anode180w[3..3], w_anode169w[3..3], w_anode158w[3..3], w_anode147w[3..3], w_anode136w[3..3], w_anode118w[3..3]);
	w_anode118w[] = ( (w_anode118w[2..2] & (! data_wire[2..2])), (w_anode118w[1..1] & (! data_wire[1..1])), (w_anode118w[0..0] & (! data_wire[0..0])), B"1");
	w_anode136w[] = ( (w_anode136w[2..2] & (! data_wire[2..2])), (w_anode136w[1..1] & (! data_wire[1..1])), (w_anode136w[0..0] & data_wire[0..0]), B"1");
	w_anode147w[] = ( (w_anode147w[2..2] & (! data_wire[2..2])), (w_anode147w[1..1] & data_wire[1..1]), (w_anode147w[0..0] & (! data_wire[0..0])), B"1");
	w_anode158w[] = ( (w_anode158w[2..2] & (! data_wire[2..2])), (w_anode158w[1..1] & data_wire[1..1]), (w_anode158w[0..0] & data_wire[0..0]), B"1");
	w_anode169w[] = ( (w_anode169w[2..2] & data_wire[2..2]), (w_anode169w[1..1] & (! data_wire[1..1])), (w_anode169w[0..0] & (! data_wire[0..0])), B"1");
	w_anode180w[] = ( (w_anode180w[2..2] & data_wire[2..2]), (w_anode180w[1..1] & (! data_wire[1..1])), (w_anode180w[0..0] & data_wire[0..0]), B"1");
	w_anode191w[] = ( (w_anode191w[2..2] & data_wire[2..2]), (w_anode191w[1..1] & data_wire[1..1]), (w_anode191w[0..0] & (! data_wire[0..0])), B"1");
	w_anode202w[] = ( (w_anode202w[2..2] & data_wire[2..2]), (w_anode202w[1..1] & data_wire[1..1]), (w_anode202w[0..0] & data_wire[0..0]), B"1");
END;
--VALID FILE
